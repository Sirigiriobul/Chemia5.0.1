{"name": "test_valid_login_page", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <img _ngcontent-uuc-c103=\"\" class=\"img-fluid rounded-start\" style=\"height: 213px; width: 275px;\" src=\"assets/images/labinv.jpg \" alt=\"Lab-Equipment-Inventory image not found\"> is not clickable at point (445, 214). Other element would receive the click: <div _ngcontent-uuc-c53=\"\" class=\"cssload-container ng-star-inserted\">...</div>\n  (Session info: chrome=128.0.6613.119)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7964DB5D2+29090]\n\t(No symbol) [0x00007FF79644E689]\n\t(No symbol) [0x00007FF79630B1CA]\n\t(No symbol) [0x00007FF796366C0E]\n\t(No symbol) [0x00007FF796364682]\n\t(No symbol) [0x00007FF796361B9B]\n\t(No symbol) [0x00007FF796360DB5]\n\t(No symbol) [0x00007FF796352D61]\n\t(No symbol) [0x00007FF7963866EA]\n\t(No symbol) [0x00007FF7963526A6]\n\t(No symbol) [0x00007FF796386900]\n\t(No symbol) [0x00007FF7963A65D9]\n\t(No symbol) [0x00007FF796386493]\n\t(No symbol) [0x00007FF7963509B1]\n\t(No symbol) [0x00007FF796351B11]\n\tGetHandleVerifier [0x00007FF7967F8C5D+3295277]\n\tGetHandleVerifier [0x00007FF796844843+3605523]\n\tGetHandleVerifier [0x00007FF79683A707+3564247]\n\tGetHandleVerifier [0x00007FF796596EB6+797318]\n\t(No symbol) [0x00007FF79645980F]\n\t(No symbol) [0x00007FF7964553F4]\n\t(No symbol) [0x00007FF796455580]\n\t(No symbol) [0x00007FF796444A1F]\n\tBaseThreadInitThunk [0x00007FFD3B39257D+29]\n\tRtlUserThreadStart [0x00007FFD3D3EAF28+40]", "trace": "self = <testCases.test_LoginPage.Test_01_Login object at 0x00000196A8D89970>\nsetUp = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c8f9ad33c5101a0c3cd44af482a0a4ef\")>\n\n    @pytest.mark.run(order=2)\n    @pytest.mark.smoke\n    def test_valid_login_page(self, setUp):\n        self.driver = setUp\n        self.login = Login(self.driver)\n        time.sleep(5)\n        self.login.enter_userName(self.userName)\n        self.login.enter_Password(self.password)\n        self.login.clicking_on_login()\n        time.sleep(4)\n>       self.login.clicking_on_labInventory()\n\ntestCases\\test_LoginPage.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\login.py:22: in clicking_on_labInventory\n    self.driver.find_element(By.XPATH,self.image_Lie_Xpath).click()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000196AB508B90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF796444A1F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFD3B39257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFD3D3EAF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <img _ngcontent-uuc-c103=\"\" class=\"img-fluid rounded-start\" style=\"height: 213px; width: 275px;\" src=\"assets/images/labinv.jpg \" alt=\"Lab-Equipment-Inventory image not found\"> is not clickable at point (445, 214). Other element would receive the click: <div _ngcontent-uuc-c53=\"\" class=\"cssload-container ng-star-inserted\">...</div>\nE         (Session info: chrome=128.0.6613.119)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7964DB5D2+29090]\nE       \t(No symbol) [0x00007FF79644E689]\nE       \t(No symbol) [0x00007FF79630B1CA]\nE       \t(No symbol) [0x00007FF796366C0E]\nE       \t(No symbol) [0x00007FF796364682]\nE       \t(No symbol) [0x00007FF796361B9B]\nE       \t(No symbol) [0x00007FF796360DB5]\nE       \t(No symbol) [0x00007FF796352D61]\nE       \t(No symbol) [0x00007FF7963866EA]\nE       \t(No symbol) [0x00007FF7963526A6]\nE       \t(No symbol) [0x00007FF796386900]\nE       \t(No symbol) [0x00007FF7963A65D9]\nE       \t(No symbol) [0x00007FF796386493]\nE       \t(No symbol) [0x00007FF7963509B1]\nE       \t(No symbol) [0x00007FF796351B11]\nE       \tGetHandleVerifier [0x00007FF7967F8C5D+3295277]\nE       \tGetHandleVerifier [0x00007FF796844843+3605523]\nE       \tGetHandleVerifier [0x00007FF79683A707+3564247]\nE       \tGetHandleVerifier [0x00007FF796596EB6+797318]\nE       \t(No symbol) [0x00007FF79645980F]\nE       \t(No symbol) [0x00007FF7964553F4]\nE       \t(No symbol) [0x00007FF796455580]\nE       \t(No symbol) [0x00007FF796444A1F]\nE       \tBaseThreadInitThunk [0x00007FFD3B39257D+29]\nE       \tRtlUserThreadStart [0x00007FFD3D3EAF28+40]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "start": 1725547747106, "stop": 1725547757928, "uuid": "13a719b0-9677-4bb1-8af1-3c49aa6ef0bd", "historyId": "a848db562f9e7db11be616ddf0ad2353", "testCaseId": "a848db562f9e7db11be616ddf0ad2353", "fullName": "testCases.test_LoginPage.Test_01_Login#test_valid_login_page", "labels": [{"name": "tag", "value": "smoke"}, {"name": "tag", "value": "run(order=2)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setUp')"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_LoginPage"}, {"name": "subSuite", "value": "Test_01_Login"}, {"name": "host", "value": "LIHYDLPT001"}, {"name": "thread", "value": "27592-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_LoginPage"}]}